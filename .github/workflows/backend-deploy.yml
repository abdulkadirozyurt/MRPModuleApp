# name: Deploy Backend

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Install Dependencies
#         run: |
#           npm install

#       - name: Build Backend
#         run: |
#           npm run build

#       - name: Validate SSH Key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.VDS_SSH_KEY }}" > ~/.ssh/id_rsa
#           chmod 700 ~/.ssh
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H 193.35.154.226 >> ~/.ssh/known_hosts

#       - name: Start Backend with PM2
#         run: |
#           ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@193.35.154.226 << 'EOF'
#             cd /var/www/backend
#             pm2 stop backend-app || true
#             pm2 delete backend-app || true
#             pm2 start dist/app.js --name "backend-app" --env production
#           EOF

name: Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VDS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VDS_IP }} >> ~/.ssh/known_hosts

      - name: Build Docker Image
        run: |
          docker build -t my-backend-image .
          docker tag my-backend-image ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest

      - name: Push Docker Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest

      - name: Deploy to VDS
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@${{ secrets.VDS_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest
            docker stop backend-container || true
            docker rm backend-container || true
            docker run -d --name backend-container -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest
          EOF
